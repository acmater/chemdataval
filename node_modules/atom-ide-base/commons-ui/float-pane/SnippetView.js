"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const dompurify_1 = __importDefault(require("dompurify"));
class SnippetView {
    constructor({ snippet, containerClassName, contentClassName, }) {
        this.rootElement = document.createElement("div");
        this.rootElement.classList.add(containerClassName);
        if (snippet) {
            const innerHTML = dompurify_1.default.sanitize(snippet);
            this.rootElement.innerHTML = `
        <div className='${contentClassName}'>${innerHTML}</div>`;
        }
    }
    get element() {
        return this.rootElement;
    }
}
exports.SnippetView = SnippetView;
async function getSnippetHtml(snippets, grammarName, renderer) {
    if (snippets !== undefined && snippets.length > 0) {
        const regExpLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
        const divElem = document.createElement("div");
        snippets.forEach((snippet) => {
            const preElem = document.createElement("pre");
            const codeElem = document.createElement("code");
            snippet = snippet.replace(/^\s*<(\?|!)([a-zA-Z]+)?\s*/i, "");
            codeElem.innerText = snippet.replace(regExpLSPPrefix, "");
            preElem.appendChild(codeElem);
            divElem.appendChild(preElem);
        });
        return renderer.render(divElem.outerHTML, grammarName);
    }
    return null;
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMtY29tbW9ucy11aS9mbG9hdC1wYW5lL1NuaXBwZXRWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDBEQUFpQztBQU1qQyxNQUFhLFdBQVc7SUFPdEIsWUFBWSxFQUNWLE9BQU8sRUFDUCxrQkFBa0IsRUFDbEIsZ0JBQWdCLEdBS2pCO1FBQ0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ2xELElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxTQUFTLEdBQUcsbUJBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUc7MEJBQ1QsZ0JBQWdCLEtBQUssU0FBUyxRQUFRLENBQUE7U0FDM0Q7SUFDSCxDQUFDO0lBTUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFBO0lBQ3pCLENBQUM7Q0FDRjtBQWhDRCxrQ0FnQ0M7QUFTTSxLQUFLLFVBQVUsY0FBYyxDQUNsQyxRQUF1QixFQUN2QixXQUFtQixFQUNuQixRQUF5QjtJQUV6QixJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakQsTUFBTSxlQUFlLEdBQUcsMENBQTBDLENBQUE7UUFDbEUsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUM3QyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQy9DLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQzVELFFBQVEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDekQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUM3QixPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUE7S0FDdkQ7SUFDRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFuQkQsd0NBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIGEgcmVmZXJlbmNlIHRvIHRoZSBET01wdXJpZnkgZnVuY3Rpb24gdG8gbWFrZSBzYWZlIEhUTUwgc3RyaW5nc1xyXG4gKi9cclxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcclxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3R5cGVzLXBhY2thZ2VzL21haW5cIlxyXG5cclxuLyoqXHJcbiAqIGFuIGV0Y2ggY29tcG9uZW50IHRoYXQgaG9zdHMgYSBjb2RlIHNuaXBwZXQgaW5jbC4gc3ludGF4IGhpZ2hsaWdodGluZ1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNuaXBwZXRWaWV3IHtcclxuICByb290RWxlbWVudDogSFRNTEVsZW1lbnRcclxuXHJcbiAgLyoqXHJcbiAgICogY3JlYXRlcyBhIHNuaXBwZXQgdmlldyBjb21wb25lbnQgaGFuZGluZyBpbiB0aGUgc25pcHBldFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzbmlwcGV0IHRoZSBjb2RlIHNuaXBwZXQgdG8gYmUgZW1iZWRkZWRcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih7XHJcbiAgICBzbmlwcGV0LFxyXG4gICAgY29udGFpbmVyQ2xhc3NOYW1lLFxyXG4gICAgY29udGVudENsYXNzTmFtZSxcclxuICB9OiB7XHJcbiAgICBzbmlwcGV0OiBzdHJpbmdcclxuICAgIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXHJcbiAgICBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmdcclxuICB9KSB7XHJcbiAgICB0aGlzLnJvb3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgdGhpcy5yb290RWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbnRhaW5lckNsYXNzTmFtZSlcclxuICAgIGlmIChzbmlwcGV0KSB7XHJcbiAgICAgIGNvbnN0IGlubmVySFRNTCA9IERPTVB1cmlmeS5zYW5pdGl6ZShzbmlwcGV0KVxyXG4gICAgICB0aGlzLnJvb3RFbGVtZW50LmlubmVySFRNTCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nJHtjb250ZW50Q2xhc3NOYW1lfSc+JHtpbm5lckhUTUx9PC9kaXY+YFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmV0dXJucyB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBzbmlwcGV0IHZpZXcgY29tcG9uZW50XHJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IHRoZSByb290IGVsZW1lbnQgd3JhcHBpbmcgdGhlIEhUTUwgY29udGVudFxyXG4gICAqL1xyXG4gIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLnJvb3RFbGVtZW50XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogY29udmVydHMgYSBnaXZlbiBjb2RlIHNuaXBwZXQgaW50byBzeW50YXggZm9ybWF0dGVkIEhUTUxcclxuICogQHBhcmFtIHNuaXBwZXRzIHRoZSBjb2RlIHNuaXBwZXQgdG8gYmUgY29udmVydGVkXHJcbiAqIEBwYXJhbSBncmFtbWFyTmFtZSB0aGUgbmFtZSBvZiB0aGUgZ3JhbW1hciB0byBiZSB1c2VkIGZvciBzeW50YXggaGlnaGxpZ2h0aW5nXHJcbiAqIEBwYXJhbSByZW5kZXJlciBtYXJrZG93biBzZXJ2aWNlIHRvIGJlIHVzZWQgZm9yIHJlbmRlcmluZ1xyXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSBvYmplY3QgdG8gdHJhY2sgdGhlIGFzeW5jaHJvbm91cyBvcGVyYXRpb25cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTbmlwcGV0SHRtbChcclxuICBzbmlwcGV0czogQXJyYXk8U3RyaW5nPixcclxuICBncmFtbWFyTmFtZTogc3RyaW5nLFxyXG4gIHJlbmRlcmVyOiBNYXJrZG93blNlcnZpY2VcclxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgaWYgKHNuaXBwZXRzICE9PSB1bmRlZmluZWQgJiYgc25pcHBldHMubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgcmVnRXhwTFNQUHJlZml4ID0gL15cXCgobWV0aG9kfHByb3BlcnR5fHBhcmFtZXRlcnxhbGlhcylcXClcXFcvXHJcbiAgICBjb25zdCBkaXZFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgc25pcHBldHMuZm9yRWFjaCgoc25pcHBldCkgPT4ge1xyXG4gICAgICBjb25zdCBwcmVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKVxyXG4gICAgICBjb25zdCBjb2RlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIpXHJcbiAgICAgIHNuaXBwZXQgPSBzbmlwcGV0LnJlcGxhY2UoL15cXHMqPChcXD98ISkoW2EtekEtWl0rKT9cXHMqL2ksIFwiXCIpIC8vIHJlbW92ZSBhbnkgcHJlYW1ibGUgZnJvbSB0aGUgbGluZVxyXG4gICAgICBjb2RlRWxlbS5pbm5lclRleHQgPSBzbmlwcGV0LnJlcGxhY2UocmVnRXhwTFNQUHJlZml4LCBcIlwiKVxyXG4gICAgICBwcmVFbGVtLmFwcGVuZENoaWxkKGNvZGVFbGVtKVxyXG4gICAgICBkaXZFbGVtLmFwcGVuZENoaWxkKHByZUVsZW0pXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHJlbmRlcmVyLnJlbmRlcihkaXZFbGVtLm91dGVySFRNTCwgZ3JhbW1hck5hbWUpXHJcbiAgfVxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuIl19