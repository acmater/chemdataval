"use strict"
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function () {
            return m[k]
          },
        })
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k
        o[k2] = m[k]
      })
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v })
      }
    : function (o, v) {
        o["default"] = v
      })
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod
    var result = {}
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k)
    __setModuleDefault(result, mod)
    return result
  }
Object.defineProperty(exports, "__esModule", { value: true })
exports.ContentView = exports.DATATIP_ACTIONS = void 0
const React = __importStar(require("react"))
const HTMLView_1 = require("./HTMLView")
const SnippetView_1 = require("./SnippetView")
exports.DATATIP_ACTIONS = Object.freeze({
  PIN: "PIN",
  CLOSE: "CLOSE",
})
const IconsForAction = {
  [exports.DATATIP_ACTIONS.PIN]: "pin",
  [exports.DATATIP_ACTIONS.CLOSE]: "x",
}
async function getContent(datatip, editor, renderer) {
  var _a, _b
  let component = null
  let html = ""
  let snippet = ""
  if ("component" in datatip) {
    return React.createElement(datatip.component, null)
  } else if (datatip.markedStrings.length > 0) {
    const grammar = editor.getGrammar().scopeName.toLowerCase()
    snippet =
      (_a = await SnippetView_1.getSnippetHtml(
        datatip.markedStrings.filter((t) => t.type === "snippet").map((t) => t.value),
        grammar,
        renderer
      )) !== null && _a !== void 0
        ? _a
        : ""
    html =
      (_b = await HTMLView_1.getDocumentationHtml(
        datatip.markedStrings.filter((t) => t.type === "markdown").map((t) => t.value),
        grammar,
        renderer
      )) !== null && _b !== void 0
        ? _b
        : ""
    const htmlOrSnippet = snippet + html
    return React.createElement("div", null, htmlOrSnippet)
  } else {
    return null
  }
}
class ContentView extends React.Component {
  constructor() {
    super(...arguments)
    this.handleActionClick = (event) => {
      this.props.onActionClick()
    }
  }
  render() {
    const { className, action, actionTitle, datatip, onActionClick, ...props } = this.props
    let actionButton = null
    if (action != null && IconsForAction[action] != null) {
      const actionIcon = IconsForAction[action]
      actionButton = React.createElement("div", {
        className: `datatip-pin-button icon-${actionIcon}`,
        onClick: this.handleActionClick,
        title: actionTitle,
      })
    }
    const content = getContent(datatip, editor, renderer)
    return React.createElement(
      "div",
      Object.assign({ className: `${String(className)} datatip-container` }, props),
      React.createElement("div", { className: "datatip-content" }, content),
      actionButton
    )
  }
}
exports.ContentView = ContentView
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudFZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMtY29tbW9ucy11aS9mbG9hdC1wYW5lL0NvbnRlbnRWaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsNkNBQThCO0FBRzlCLHlDQUEyRDtBQUMzRCwrQ0FBMkQ7QUFHOUMsUUFBQSxlQUFlLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzQyxHQUFHLEVBQUUsS0FBSztJQUNWLEtBQUssRUFBRSxPQUFPO0NBQ2YsQ0FBQyxDQUFBO0FBRUYsTUFBTSxjQUFjLEdBQUc7SUFDckIsQ0FBQyx1QkFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUs7SUFDNUIsQ0FBQyx1QkFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUc7Q0FDN0IsQ0FBQTtBQWlCRCxLQUFLLFVBQVUsVUFBVSxDQUFDLE9BQWdCLEVBQUUsTUFBa0IsRUFBRSxRQUF5Qjs7SUFDdkYsSUFBSSxTQUFTLEdBQXdCLElBQUksQ0FBQTtJQUN6QyxJQUFJLElBQUksR0FBVyxFQUFFLENBQUE7SUFDckIsSUFBSSxPQUFPLEdBQVcsRUFBRSxDQUFBO0lBQ3hCLElBQUksV0FBVyxJQUFJLE9BQU8sRUFBRTtRQUMxQixPQUFPLG9CQUFDLE9BQU8sQ0FBQyxTQUFTLE9BQUcsQ0FBQTtLQUM3QjtTQUFNLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDM0QsT0FBTyxTQUNMLENBQUMsTUFBTSw0QkFBYyxDQUNuQixPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDN0UsT0FBTyxFQUNQLFFBQVEsQ0FDVCxDQUFDLG1DQUFJLEVBQUUsQ0FBQTtRQUNWLElBQUksU0FDRixDQUFDLE1BQU0sK0JBQW9CLENBQ3pCLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUM5RSxPQUFPLEVBQ1AsUUFBUSxDQUNULENBQUMsbUNBQUksRUFBRSxDQUFBO1FBQ1YsTUFBTSxhQUFhLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQTtRQUNwQyxPQUFPLGlDQUFNLGFBQWEsQ0FBTyxDQUFBO0tBQ2xDO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0gsQ0FBQztBQUVELE1BQWEsV0FBWSxTQUFRLEtBQUssQ0FBQyxTQUFnQztJQUF2RTs7UUFDRSxzQkFBaUIsR0FBRyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQzVCLENBQUMsQ0FBQTtJQXNCSCxDQUFDO0lBcEJDLE1BQU07UUFDSixNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxHQUFHLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7UUFFdkYsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFBO1FBQ3ZCLElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3BELE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN6QyxZQUFZLEdBQUcsQ0FDYiw2QkFBSyxTQUFTLEVBQUUsMkJBQTJCLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsR0FBSSxDQUNqSCxDQUFBO1NBQ0Y7UUFFRCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUVyRCxPQUFPLENBQ0wsMkNBQUssU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsSUFBTSxLQUFLO1lBQ2pFLDZCQUFLLFNBQVMsRUFBQyxpQkFBaUIsSUFBRSxPQUFPLENBQU87WUFDL0MsWUFBWSxDQUNULENBQ1AsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQXpCRCxrQ0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERhdGF0aXAgfSBmcm9tIFwiLi4vLi4vdHlwZXMtcGFja2FnZXMvbWFpbi5kXCJcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB0eXBlIHsgUmVhY3RFbGVtZW50IH0gZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgSFRNTFZpZXcsIGdldERvY3VtZW50YXRpb25IdG1sIH0gZnJvbSBcIi4vSFRNTFZpZXdcIlxuaW1wb3J0IHsgU25pcHBldFZpZXcsIGdldFNuaXBwZXRIdG1sIH0gZnJvbSBcIi4vU25pcHBldFZpZXdcIlxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3R5cGVzLXBhY2thZ2VzL21haW5cIlxuXG5leHBvcnQgY29uc3QgREFUQVRJUF9BQ1RJT05TID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFBJTjogXCJQSU5cIixcbiAgQ0xPU0U6IFwiQ0xPU0VcIixcbn0pXG5cbmNvbnN0IEljb25zRm9yQWN0aW9uID0ge1xuICBbREFUQVRJUF9BQ1RJT05TLlBJTl06IFwicGluXCIsXG4gIFtEQVRBVElQX0FDVElPTlMuQ0xPU0VdOiBcInhcIixcbn1cblxudHlwZSBEYXRhdGlwQ29tcG9uZW50UHJvcHMgPSB7XG4gIGFjdGlvbjogc3RyaW5nXG4gIGFjdGlvblRpdGxlOiBzdHJpbmdcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIGRhdGF0aXA6IERhdGF0aXBcbiAgb25BY3Rpb25DbGljazogRnVuY3Rpb25cbn1cblxuLyoqXG4gKiBnZXQgY29udGVudCBvZiB0aGUgZ2l2ZW4gZGF0YXRpcCBhcyBIVE1MXG4gKiBAcGFyYW0gZGF0YXRpcCBvYmplY3QgdG8gYmUgcmVuZGVyZWRcbiAqIEBwYXJhbSBlZGl0b3IgdGhlIEF0b20gVGV4dCBlZGl0b3IgaW5zdGFuY2UgdG8gaG9zdCB0aGUgZGF0YSB0aXAgdmlld1xuICogQHBhcmFtIHJlbmRlcmVyIG1hcmtkb3duIHNlcnZpY2UgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nXG4gKiBAcmV0dXJuIGEgcHJvbWlzZSBvYmplY3QgdG8gdGhlIHJlZW5kZXJlZCBjb250ZW50XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRlbnQoZGF0YXRpcDogRGF0YXRpcCwgZWRpdG9yOiBUZXh0RWRpdG9yLCByZW5kZXJlcjogTWFya2Rvd25TZXJ2aWNlKSB7XG4gIGxldCBjb21wb25lbnQ6IFJlYWN0RWxlbWVudCB8IG51bGwgPSBudWxsXG4gIGxldCBodG1sOiBzdHJpbmcgPSBcIlwiXG4gIGxldCBzbmlwcGV0OiBzdHJpbmcgPSBcIlwiXG4gIGlmIChcImNvbXBvbmVudFwiIGluIGRhdGF0aXApIHtcbiAgICByZXR1cm4gPGRhdGF0aXAuY29tcG9uZW50IC8+XG4gIH0gZWxzZSBpZiAoZGF0YXRpcC5tYXJrZWRTdHJpbmdzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBncmFtbWFyID0gZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWUudG9Mb3dlckNhc2UoKVxuICAgIHNuaXBwZXQgPVxuICAgICAgKGF3YWl0IGdldFNuaXBwZXRIdG1sKFxuICAgICAgICBkYXRhdGlwLm1hcmtlZFN0cmluZ3MuZmlsdGVyKCh0KSA9PiB0LnR5cGUgPT09IFwic25pcHBldFwiKS5tYXAoKHQpID0+IHQudmFsdWUpLFxuICAgICAgICBncmFtbWFyLFxuICAgICAgICByZW5kZXJlclxuICAgICAgKSkgPz8gXCJcIlxuICAgIGh0bWwgPVxuICAgICAgKGF3YWl0IGdldERvY3VtZW50YXRpb25IdG1sKFxuICAgICAgICBkYXRhdGlwLm1hcmtlZFN0cmluZ3MuZmlsdGVyKCh0KSA9PiB0LnR5cGUgPT09IFwibWFya2Rvd25cIikubWFwKCh0KSA9PiB0LnZhbHVlKSxcbiAgICAgICAgZ3JhbW1hcixcbiAgICAgICAgcmVuZGVyZXJcbiAgICAgICkpID8/IFwiXCJcbiAgICBjb25zdCBodG1sT3JTbmlwcGV0ID0gc25pcHBldCArIGh0bWxcbiAgICByZXR1cm4gPGRpdj57aHRtbE9yU25pcHBldH08L2Rpdj5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50VmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxEYXRhdGlwQ29tcG9uZW50UHJvcHM+IHtcbiAgaGFuZGxlQWN0aW9uQ2xpY2sgPSAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PD4pID0+IHtcbiAgICB0aGlzLnByb3BzLm9uQWN0aW9uQ2xpY2soKVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBhY3Rpb24sIGFjdGlvblRpdGxlLCBkYXRhdGlwLCBvbkFjdGlvbkNsaWNrLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgbGV0IGFjdGlvbkJ1dHRvbiA9IG51bGxcbiAgICBpZiAoYWN0aW9uICE9IG51bGwgJiYgSWNvbnNGb3JBY3Rpb25bYWN0aW9uXSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBhY3Rpb25JY29uID0gSWNvbnNGb3JBY3Rpb25bYWN0aW9uXVxuICAgICAgYWN0aW9uQnV0dG9uID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGRhdGF0aXAtcGluLWJ1dHRvbiBpY29uLSR7YWN0aW9uSWNvbn1gfSBvbkNsaWNrPXt0aGlzLmhhbmRsZUFjdGlvbkNsaWNrfSB0aXRsZT17YWN0aW9uVGl0bGV9IC8+XG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudCA9IGdldENvbnRlbnQoZGF0YXRpcCwgZWRpdG9yLCByZW5kZXJlcilcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7U3RyaW5nKGNsYXNzTmFtZSl9IGRhdGF0aXAtY29udGFpbmVyYH0gey4uLnByb3BzfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXRhdGlwLWNvbnRlbnRcIj57Y29udGVudH08L2Rpdj5cbiAgICAgICAge2FjdGlvbkJ1dHRvbn1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuIl19
