"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactView = void 0;
const server_1 = require("react-dom/server");
const dompurify_1 = __importDefault(require("dompurify"));
class ReactView {
    constructor({ component, containerClassName, contentClassName, }) {
        this.containerClassName = containerClassName;
        this.contentClassName = contentClassName;
        if (component) {
            this.children = component();
        }
        this.render();
    }
    render() {
        this.rootElement = document.createElement("span");
        this.rootElement.classList.add(this.containerClassName);
        if (this.children) {
            this.childrenStatic = dompurify_1.default.sanitize(server_1.renderToStaticMarkup(this.children));
            this.rootElement.innerHTML = `
          <div className="${this.contentClassName}">${this.childrenStatic}</div>
      `;
        }
        return this.rootElement;
    }
    get element() {
        return this.rootElement;
    }
}
exports.ReactView = ReactView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVhY3RWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9SZWFjdFZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkNBQXVEO0FBTXZELDBEQUFpQztBQUtqQyxNQUFhLFNBQVM7SUFXcEIsWUFBWSxFQUNWLFNBQVMsRUFDVCxrQkFBa0IsRUFDbEIsZ0JBQWdCLEdBS2pCO1FBQ0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFBO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQTtRQUN4QyxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUFFLENBQUE7U0FDNUI7UUFDRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7SUFFZixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDdkQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQVMsQ0FBQyxRQUFRLENBQUMsNkJBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDN0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUc7NEJBQ1AsSUFBSSxDQUFDLGdCQUFnQixLQUFLLElBQUksQ0FBQyxjQUFjO09BQ2xFLENBQUE7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUN6QixDQUFDO0lBTUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFBO0lBQ3pCLENBQUM7Q0FDRjtBQWhERCw4QkFnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJUb1N0YXRpY01hcmt1cCB9IGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCJcclxuaW1wb3J0IHR5cGUgeyBSZWFjdEVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIlxyXG5cclxuLyoqXHJcbiAqIGEgcmVmZXJlbmNlIHRvIHRoZSBET01wdXJpZnkgZnVuY3Rpb24gdG8gbWFrZSBzYWZlIEhUTUwgc3RyaW5nc1xyXG4gKi9cclxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcclxuXHJcbi8qKlxyXG4gKiBhbiBldGNoIGNvbXBvbmVudCB0aGF0IGNhbiBob3N0IGFuIGV4dGVybmFsbHkgZ2l2ZW4gUmVhY3QgY29tcG9uZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVhY3RWaWV3IHtcclxuICByb290RWxlbWVudDogSFRNTEVsZW1lbnRcclxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudFxyXG4gIGNoaWxkcmVuU3RhdGljPzogc3RyaW5nXHJcbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmdcclxuICBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmdcclxuXHJcbiAgLyoqXHJcbiAgICogY3JlYXRlcyBhIFJlYWN0IHZpZXcgY29tcG9uZW50IGhhbmRpbmcgb3ZlciB0aGUgUmVhY3QgY29kZSB0byBiZSByZW5kZXJlZFxyXG4gICAqIEBwYXJhbSBjb21wb25lbnQgdGhlIFJlYWN0IGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHtcclxuICAgIGNvbXBvbmVudCxcclxuICAgIGNvbnRhaW5lckNsYXNzTmFtZSxcclxuICAgIGNvbnRlbnRDbGFzc05hbWUsXHJcbiAgfToge1xyXG4gICAgY29tcG9uZW50OiAoKSA9PiBSZWFjdEVsZW1lbnRcclxuICAgIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXHJcbiAgICBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmdcclxuICB9KSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lckNsYXNzTmFtZSA9IGNvbnRhaW5lckNsYXNzTmFtZVxyXG4gICAgdGhpcy5jb250ZW50Q2xhc3NOYW1lID0gY29udGVudENsYXNzTmFtZVxyXG4gICAgaWYgKGNvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmNoaWxkcmVuID0gY29tcG9uZW50KClcclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyKClcclxuICAgIC8vIGV0Y2guaW5pdGlhbGl6ZSh0aGlzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMucm9vdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxyXG4gICAgdGhpcy5yb290RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lKVxyXG4gICAgaWYgKHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgdGhpcy5jaGlsZHJlblN0YXRpYyA9IERPTVB1cmlmeS5zYW5pdGl6ZShyZW5kZXJUb1N0YXRpY01hcmt1cCh0aGlzLmNoaWxkcmVuKSlcclxuICAgICAgdGhpcy5yb290RWxlbWVudC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIiR7dGhpcy5jb250ZW50Q2xhc3NOYW1lfVwiPiR7dGhpcy5jaGlsZHJlblN0YXRpY308L2Rpdj5cclxuICAgICAgYFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJldHVybnMgdGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgUmVhY3QgdmlldyBjb21wb25lbnRcclxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gdGhlIHJvb3QgZWxlbWVudCB3cmFwcGluZyB0aGUgSFRNTCBjb250ZW50XHJcbiAgICovXHJcbiAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMucm9vdEVsZW1lbnRcclxuICB9XHJcbn1cclxuIl19