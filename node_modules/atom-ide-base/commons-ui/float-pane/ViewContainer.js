"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewContainer = void 0;
const etch_1 = __importDefault(require("etch"));
const HTMLView_1 = require("./HTMLView");
const SnippetView_1 = require("./SnippetView");
const ReactView_1 = require("./ReactView");
class ViewContainer {
    constructor(props, children) {
        this.props = props;
        this.children = children || [];
        this.updateChildren();
        etch_1.default.initialize(this);
    }
    render() {
        const glowClass = atom.config.get("atom-ide-datatip.glowOnHover") ? "datatip-glow" : "";
        const classes = `datatip-element ${glowClass}`;
        return etch_1.default.dom("div", { className: classes }, this.children);
    }
    update(props, children) {
        this.props = props;
        this.children = children || [];
        this.updateChildren();
        return etch_1.default.update(this);
    }
    async destroy() {
        await etch_1.default.destroy(this);
    }
    updateChildren() {
        if (this.props.component) {
            const { element, containerClassName, contentClassName } = this.props.component;
            this.children.push(etch_1.default.dom(ReactView_1.ReactView, { component: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
        if (this.props.snippet) {
            const { element, containerClassName, contentClassName } = this.props.snippet;
            this.children.push(etch_1.default.dom(SnippetView_1.SnippetView, { snippet: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
        if (this.props.html) {
            const { element, containerClassName, contentClassName } = this.props.html;
            this.children.push(etch_1.default.dom(HTMLView_1.HTMLView, { html: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
    }
}
exports.ViewContainer = ViewContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld0NvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvVmlld0NvbnRhaW5lci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsZ0RBQXVCO0FBQ3ZCLHlDQUFxQztBQUNyQywrQ0FBMkM7QUFDM0MsMkNBQXVDO0FBTXZDLE1BQWEsYUFBYTtJQWF4QixZQUFZLEtBQVUsRUFBRSxRQUE2QjtRQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxFQUFFLENBQUE7UUFDOUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3JCLGNBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkIsQ0FBQztJQU1ELE1BQU07UUFDSixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUN2RixNQUFNLE9BQU8sR0FBRyxtQkFBbUIsU0FBUyxFQUFFLENBQUE7UUFDOUMsT0FBTyw0QkFBSyxTQUFTLEVBQUUsT0FBTyxJQUFHLElBQUksQ0FBQyxRQUFRLENBQU8sQ0FBQTtJQUN2RCxDQUFDO0lBS0QsTUFBTSxDQUFDLEtBQVUsRUFBRSxRQUE2QjtRQUc5QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxFQUFFLENBQUE7UUFDOUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQ3JCLE9BQU8sY0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBTUQsS0FBSyxDQUFDLE9BQU87UUFDWCxNQUFNLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQU1ELGNBQWM7UUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ3hCLE1BQU0sRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQTtZQUM5RSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsbUJBQUMscUJBQVMsSUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixHQUFJLENBQzlHLENBQUE7U0FDRjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDdEIsTUFBTSxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFBO1lBQzVFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixtQkFBQyx5QkFBVyxJQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEdBQUksQ0FDOUcsQ0FBQTtTQUNGO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNuQixNQUFNLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUE7WUFDekUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLG1CQUFDLG1CQUFRLElBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FBSSxDQUN4RyxDQUFBO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUExRUQsc0NBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3ggZXRjaC5kb20gKi9cclxuXHJcbmltcG9ydCBldGNoIGZyb20gXCJldGNoXCJcclxuaW1wb3J0IHsgSFRNTFZpZXcgfSBmcm9tIFwiLi9IVE1MVmlld1wiXHJcbmltcG9ydCB7IFNuaXBwZXRWaWV3IH0gZnJvbSBcIi4vU25pcHBldFZpZXdcIlxyXG5pbXBvcnQgeyBSZWFjdFZpZXcgfSBmcm9tIFwiLi9SZWFjdFZpZXdcIlxyXG5pbXBvcnQgdHlwZSB7IFJlYWN0RWxlbWVudCB9IGZyb20gXCJyZWFjdFwiXHJcblxyXG4vKipcclxuICogYW4gZXRjaCBjb21wb25lbnQgZm9yIGEgZGVjb3JhdGlvbiBwYW5lXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmlld0NvbnRhaW5lciB7XHJcbiAgcHJvcHM6IHtcclxuICAgIGNvbXBvbmVudD86IHsgZWxlbWVudDogKCkgPT4gUmVhY3RFbGVtZW50OyBjb250YWluZXJDbGFzc05hbWU6IHN0cmluZzsgY29udGVudENsYXNzTmFtZTogc3RyaW5nIH1cclxuICAgIGh0bWw/OiB7IGVsZW1lbnQ6IHN0cmluZzsgY29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmc7IGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZyB9XHJcbiAgICBzbmlwcGV0PzogeyBlbGVtZW50OiBzdHJpbmc7IGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nOyBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmcgfVxyXG4gIH1cclxuICBjaGlsZHJlbjogQXJyYXk8SlNYLkVsZW1lbnQ+XHJcblxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZXMgYSBkYXRhIHRpcCB2aWV3IGNvbXBvbmVudFxyXG4gICAqIEBwYXJhbSBwcm9wcyAgdGhlIHByb3BzIG9mIHRoaXMgZGF0YSB0aXAgdmlld1xyXG4gICAqIEBwYXJhbSBjaGlsZHJlbiBwb3RlbnRpYWwgY2hpbGQgbm9kZXMgb2YgdGhpcyBkYXRhIHRpcCB2aWV3XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IGFueSwgY2hpbGRyZW4/OiBBcnJheTxKU1guRWxlbWVudD4pIHtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wc1xyXG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdXHJcbiAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKClcclxuICAgIGV0Y2guaW5pdGlhbGl6ZSh0aGlzKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVuZGVycyB0aGUgZGF0YSB0aXAgdmlldyBjb21wb25lbnRcclxuICAgKiBAcmV0dXJuIHRoZSBkYXRhIHRpcCB2aWV3IGVsZW1lbnRcclxuICAgKi9cclxuICByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgY29uc3QgZ2xvd0NsYXNzID0gYXRvbS5jb25maWcuZ2V0KFwiYXRvbS1pZGUtZGF0YXRpcC5nbG93T25Ib3ZlclwiKSA/IFwiZGF0YXRpcC1nbG93XCIgOiBcIlwiXHJcbiAgICBjb25zdCBjbGFzc2VzID0gYGRhdGF0aXAtZWxlbWVudCAke2dsb3dDbGFzc31gXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzZXN9Pnt0aGlzLmNoaWxkcmVufTwvZGl2PlxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlcyB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGRhdGEgdGlwIHZpZXdcclxuICAgKi9cclxuICB1cGRhdGUocHJvcHM6IGFueSwgY2hpbGRyZW4/OiBBcnJheTxKU1guRWxlbWVudD4pIHtcclxuICAgIC8vIHBlcmZvcm0gY3VzdG9tIHVwZGF0ZSBsb2dpYyBoZXJlLi4uXHJcbiAgICAvLyB0aGVuIGNhbGwgYGV0Y2gudXBkYXRlYCwgd2hpY2ggaXMgYXN5bmMgYW5kIHJldHVybnMgYSBwcm9taXNlXHJcbiAgICB0aGlzLnByb3BzID0gcHJvcHNcclxuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXVxyXG4gICAgdGhpcy51cGRhdGVDaGlsZHJlbigpXHJcbiAgICByZXR1cm4gZXRjaC51cGRhdGUodGhpcylcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNsZWFuIHVwIHRoZSBkYXRhIHRpcCB2aWV3XHJcbiAgICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIGtlZXAgdHJhY2sgb2YgdGhlIGFzeW5jaHJvbm91cyBvcGVyYXRpb25cclxuICAgKi9cclxuICBhc3luYyBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgZXRjaC5kZXN0cm95KHRoaXMpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBpbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc3RydWN0dXJlIG9mIHRoZSBkYXRhIHRpcCB2aWV3XHJcbiAgICogdG8gYmUgcmVuZGVyZWRcclxuICAgKi9cclxuICB1cGRhdGVDaGlsZHJlbigpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLmNvbXBvbmVudCkge1xyXG4gICAgICBjb25zdCB7IGVsZW1lbnQsIGNvbnRhaW5lckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcy5jb21wb25lbnRcclxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKFxyXG4gICAgICAgIDxSZWFjdFZpZXcgY29tcG9uZW50PXtlbGVtZW50fSBjb250YWluZXJDbGFzc05hbWU9e2NvbnRhaW5lckNsYXNzTmFtZX0gY29udGVudENsYXNzTmFtZT17Y29udGVudENsYXNzTmFtZX0gLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucHJvcHMuc25pcHBldCkge1xyXG4gICAgICBjb25zdCB7IGVsZW1lbnQsIGNvbnRhaW5lckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcy5zbmlwcGV0XHJcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChcclxuICAgICAgICA8U25pcHBldFZpZXcgc25pcHBldD17ZWxlbWVudH0gY29udGFpbmVyQ2xhc3NOYW1lPXtjb250YWluZXJDbGFzc05hbWV9IGNvbnRlbnRDbGFzc05hbWU9e2NvbnRlbnRDbGFzc05hbWV9IC8+XHJcbiAgICAgIClcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnByb3BzLmh0bWwpIHtcclxuICAgICAgY29uc3QgeyBlbGVtZW50LCBjb250YWluZXJDbGFzc05hbWUsIGNvbnRlbnRDbGFzc05hbWUgfSA9IHRoaXMucHJvcHMuaHRtbFxyXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goXHJcbiAgICAgICAgPEhUTUxWaWV3IGh0bWw9e2VsZW1lbnR9IGNvbnRhaW5lckNsYXNzTmFtZT17Y29udGFpbmVyQ2xhc3NOYW1lfSBjb250ZW50Q2xhc3NOYW1lPXtjb250ZW50Q2xhc3NOYW1lfSAvPlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==