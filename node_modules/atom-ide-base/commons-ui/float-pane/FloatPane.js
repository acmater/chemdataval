"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinnedDatatip = void 0;
const React = __importStar(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
const rxjs_1 = require("rxjs");
const assert_1 = __importDefault(require("assert"));
const classnames_1 = __importDefault(require("classnames"));
const atom_1 = __importDefault(require("atom"));
const ContentView_1 = require("./ContentView");
const isScrollable_1 = __importDefault(require("./isScrollable"));
const LINE_END_MARGIN = 20;
let _mouseMove$;
function documentMouseMove$() {
    if (_mouseMove$ == null) {
        _mouseMove$ = rxjs_1.Observable.fromEvent(document, "mousemove");
    }
    return _mouseMove$;
}
let _mouseUp$;
function documentMouseUp$() {
    if (_mouseUp$ == null) {
        _mouseUp$ = rxjs_1.Observable.fromEvent(document, "mouseup");
    }
    return _mouseUp$;
}
class PinnedDatatip {
    constructor(datatip, editor, params) {
        this._subscriptions = new atom_1.default();
        this._subscriptions.add(new atom_1.default(() => params.onDispose(this)));
        this._datatip = datatip;
        this._editor = editor;
        this._marker = null;
        this._rangeDecoration = null;
        this._hostElement = document.createElement("div");
        this._hostElement.className = "datatip-element";
        this._boundDispose = this.dispose.bind(this);
        this._boundHandleMouseDown = this.handleMouseDown.bind(this);
        this._boundHandleMouseEnter = this.handleMouseEnter.bind(this);
        this._boundHandleMouseLeave = this.handleMouseLeave.bind(this);
        this._boundHandleCapturedClick = this.handleCapturedClick.bind(this);
        this._checkedScrollable = false;
        this._isScrollable = false;
        this._subscriptions.add(rxjs_1.Observable.fromEvent(this._hostElement, "wheel").subscribe((e) => {
            if (!this._checkedScrollable) {
                this._isScrollable = isScrollable_1.default(this._hostElement, e);
                this._checkedScrollable = true;
            }
            if (this._isScrollable) {
                e.stopPropagation();
            }
        }));
        this._hostElement.addEventListener("mouseenter", this._boundHandleMouseEnter);
        this._hostElement.addEventListener("mouseleave", this._boundHandleMouseLeave);
        this._subscriptions.add(new atom_1.default(() => {
            this._hostElement.removeEventListener("mouseenter", this._boundHandleMouseEnter);
            this._hostElement.removeEventListener("mouseleave", this._boundHandleMouseLeave);
        }));
        this._mouseUpTimeout = null;
        this._offset = { x: 0, y: 0 };
        this._isDragging = false;
        this._dragOrigin = null;
        this._isHovering = false;
        this._hideDataTips = params.hideDataTips;
        this._position = params.position == null ? "end-of-line" : params.position;
        this._showRangeHighlight = params.showRangeHighlight == null ? true : params.showRangeHighlight;
        this.render();
    }
    handleMouseEnter(event) {
        this._isHovering = true;
        this._hideDataTips();
    }
    handleMouseLeave(event) {
        this._isHovering = false;
    }
    isHovering() {
        return this._isHovering;
    }
    handleGlobalMouseMove(event) {
        const evt = (event) => ;
        const { _dragOrigin } = this;
        assert_1.default(_dragOrigin);
        this._isDragging = true;
        this._offset = {
            x: evt.clientX - _dragOrigin.x,
            y: evt.clientY - _dragOrigin.y,
        };
        this.render();
    }
    handleGlobalMouseUp() {
        this._mouseUpTimeout = setTimeout(() => {
            this._isDragging = false;
            this._dragOrigin = null;
            this._mouseUpTimeout = null;
            this._ensureMouseSubscriptionDisposed();
            this.render();
        }, 0);
    }
    _ensureMouseSubscriptionDisposed() {
        if (this._mouseSubscription != null) {
            this._mouseSubscription.unsubscribe();
            this._mouseSubscription = null;
        }
    }
    handleMouseDown(event) {
        const evt = (event) => ;
        this._dragOrigin = {
            x: evt.clientX - this._offset.x,
            y: evt.clientY - this._offset.y,
        };
        this._ensureMouseSubscriptionDisposed();
        this._mouseSubscription = documentMouseMove$()
            .takeUntil(documentMouseUp$())
            .subscribe((e) => {
            this.handleGlobalMouseMove(e);
        }, (error) => { }, () => {
            this.handleGlobalMouseUp();
        });
    }
    handleCapturedClick(event) {
        if (this._isDragging) {
            event.stopPropagation();
        }
        else {
            this._checkedScrollable = false;
        }
    }
    _updateHostElementPosition() {
        const { _editor, _datatip, _hostElement, _offset, _position } = this;
        const { range } = _datatip;
        _hostElement.style.display = "block";
        switch (_position) {
            case "end-of-line":
                const charWidth = _editor.getDefaultCharWidth();
                const lineLength = _editor.getBuffer().getLines()[range.start.row].length;
                _hostElement.style.top = -_editor.getLineHeightInPixels() + _offset.y + "px";
                _hostElement.style.left = (lineLength - range.end.column) * charWidth + LINE_END_MARGIN + _offset.x + "px";
                break;
            case "above-range":
                _hostElement.style.bottom = _editor.getLineHeightInPixels() + _hostElement.clientHeight - _offset.y + "px";
                _hostElement.style.left = _offset.x + "px";
                break;
            default:
                ;
                (_position) => ;
                throw new Error(`Unexpected PinnedDatatip position: ${this._position}`);
        }
    }
    async render() {
        const { _editor, _datatip, _hostElement, _isDragging, _isHovering } = this;
        let rangeClassname = "datatip-highlight-region";
        if (_isHovering) {
            rangeClassname += " datatip-highlight-region-active";
        }
        if (this._marker == null) {
            const marker = _editor.markBufferRange(_datatip.range, {
                invalidate: "never",
            });
            this._marker = marker;
            _editor.decorateMarker(marker, {
                type: "overlay",
                position: "head",
                class: "datatip-pinned-overlay",
                item: this._hostElement,
                avoidOverflow: this._position !== "above-range",
            });
            if (this._showRangeHighlight) {
                this._rangeDecoration = _editor.decorateMarker(marker, {
                    type: "highlight",
                    class: rangeClassname,
                });
            }
            await _editor.getElement().getNextUpdatePromise();
            if (marker.isDestroyed() || _editor.isDestroyed()) {
                return;
            }
        }
        else if (this._rangeDecoration != null) {
            this._rangeDecoration.setProperties({
                type: "highlight",
                class: rangeClassname,
            });
        }
        react_dom_1.default.render(React.createElement(ContentView_1.ContentView, { action: ContentView_1.DATATIP_ACTIONS.CLOSE, actionTitle: "Close this datatip", className: classnames_1.default(_isDragging ? "datatip-dragging" : "", "datatip-pinned"), datatip: _datatip, onActionClick: this._boundDispose, onMouseDown: this._boundHandleMouseDown, onClickCapture: this._boundHandleCapturedClick }), _hostElement);
        this._updateHostElementPosition();
    }
    dispose() {
        if (this._mouseUpTimeout != null) {
            clearTimeout(this._mouseUpTimeout);
        }
        if (this._marker != null) {
            this._marker.destroy();
        }
        if (this._mouseSubscription != null) {
            this._mouseSubscription.unsubscribe();
        }
        react_dom_1.default.unmountComponentAtNode(this._hostElement);
        this._hostElement.remove();
        this._subscriptions.dispose();
    }
}
exports.PinnedDatatip = PinnedDatatip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxvYXRQYW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9GbG9hdFBhbmUuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSw2Q0FBOEI7QUFDOUIsMERBQWdDO0FBQ2hDLCtCQUFpQztBQUNqQyxvREFBOEI7QUFDOUIsNERBQW1DO0FBQ25DLGdEQUE2QjtBQUU3QiwrQ0FBNEQ7QUFDNUQsa0VBQXlDO0FBRXpDLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQTtBQUUxQixJQUFJLFdBQVcsQ0FBQTtBQUNmLFNBQVMsa0JBQWtCO0lBQ3pCLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtRQUN2QixXQUFXLEdBQUcsaUJBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0tBQzFEO0lBQ0QsT0FBTyxXQUFXLENBQUE7QUFDcEIsQ0FBQztBQUVELElBQUksU0FBUyxDQUFBO0FBQ2IsU0FBUyxnQkFBZ0I7SUFDdkIsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1FBQ3JCLFNBQVMsR0FBRyxpQkFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUE7S0FDdEQ7SUFDRCxPQUFPLFNBQVMsQ0FBQTtBQUNsQixDQUFDO0FBV0QsTUFBYSxhQUFhO0lBMEJ4QixZQUFZLE9BQWdCLEVBQUUsTUFBa0IsRUFBRSxNQUEyQjtRQUMzRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksY0FBVSxFQUFFLENBQUE7UUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDckUsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FB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QUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDMUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0NBQ0Y7QUE1T0Qsc0NBNE9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEYXRhdGlwLCBQaW5uZWREYXRhdGlwUG9zaXRpb24gfSBmcm9tIFwiLi90eXBlc1wiXG5cbnR5cGUgUG9zaXRpb24gPSB7XG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxufVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCJcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiXG5pbXBvcnQgRGlzcG9zYWJsZSBmcm9tIFwiYXRvbVwiXG5cbmltcG9ydCB7IENvbnRlbnRWaWV3LCBEQVRBVElQX0FDVElPTlMgfSBmcm9tIFwiLi9Db250ZW50Vmlld1wiXG5pbXBvcnQgaXNTY3JvbGxhYmxlIGZyb20gXCIuL2lzU2Nyb2xsYWJsZVwiXG5cbmNvbnN0IExJTkVfRU5EX01BUkdJTiA9IDIwXG5cbmxldCBfbW91c2VNb3ZlJFxuZnVuY3Rpb24gZG9jdW1lbnRNb3VzZU1vdmUkKCk6IE9ic2VydmFibGU8TW91c2VFdmVudD4ge1xuICBpZiAoX21vdXNlTW92ZSQgPT0gbnVsbCkge1xuICAgIF9tb3VzZU1vdmUkID0gT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsIFwibW91c2Vtb3ZlXCIpXG4gIH1cbiAgcmV0dXJuIF9tb3VzZU1vdmUkXG59XG5cbmxldCBfbW91c2VVcCRcbmZ1bmN0aW9uIGRvY3VtZW50TW91c2VVcCQoKTogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiB7XG4gIGlmIChfbW91c2VVcCQgPT0gbnVsbCkge1xuICAgIF9tb3VzZVVwJCA9IE9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCBcIm1vdXNldXBcIilcbiAgfVxuICByZXR1cm4gX21vdXNlVXAkXG59XG5cbmV4cG9ydCB0eXBlIFBpbm5lZERhdGF0aXBQYXJhbXMgPSB7XG4gIG9uRGlzcG9zZTogKHBpbm5lZERhdGF0aXA6IFBpbm5lZERhdGF0aXApID0+IHZvaWQsXG4gIGhpZGVEYXRhVGlwczogKCkgPT4gdm9pZCxcbiAgLy8gRGVmYXVsdHMgdG8gJ2VuZC1vZi1saW5lJy5cbiAgcG9zaXRpb24/OiBQaW5uZWREYXRhdGlwUG9zaXRpb24sXG4gIC8vIERlZmF1bHRzIHRvIHRydWUuXG4gIHNob3dSYW5nZUhpZ2hsaWdodD86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBjbGFzcyBQaW5uZWREYXRhdGlwIHtcbiAgX2JvdW5kRGlzcG9zZTogRnVuY3Rpb25cbiAgX2JvdW5kSGFuZGxlTW91c2VEb3duOiBGdW5jdGlvblxuICBfYm91bmRIYW5kbGVNb3VzZUVudGVyOiBGdW5jdGlvblxuICBfYm91bmRIYW5kbGVNb3VzZUxlYXZlOiBGdW5jdGlvblxuICBfYm91bmRIYW5kbGVDYXB0dXJlZENsaWNrOiBGdW5jdGlvblxuICBfbW91c2VVcFRpbWVvdXQ6ID9UaW1lb3V0SURcbiAgX2hvc3RFbGVtZW50OiBIVE1MRWxlbWVudFxuICBfbWFya2VyOiA/YXRvbSRNYXJrZXJcbiAgX3JhbmdlRGVjb3JhdGlvbjogP2F0b20kRGVjb3JhdGlvblxuICBfbW91c2VTdWJzY3JpcHRpb246ID9yeGpzJElTdWJzY3JpcHRpb25cbiAgX3N1YnNjcmlwdGlvbnM6IERpc3Bvc2FibGVcbiAgX2RhdGF0aXA6IERhdGF0aXBcbiAgX2VkaXRvcjogVGV4dEVkaXRvclxuICBfaG9zdEVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gIF9ib3VuZERpc3Bvc2U6IEZ1bmN0aW9uXG4gIF9kcmFnT3JpZ2luOiA/UG9zaXRpb25cbiAgX2lzRHJhZ2dpbmc6IGJvb2xlYW5cbiAgX29mZnNldDogUG9zaXRpb25cbiAgX2lzSG92ZXJpbmc6IGJvb2xlYW5cbiAgX2NoZWNrZWRTY3JvbGxhYmxlOiBib29sZWFuXG4gIF9pc1Njcm9sbGFibGU6IGJvb2xlYW5cbiAgX2hpZGVEYXRhVGlwczogKCkgPT4gdm9pZFxuICBfcG9zaXRpb246IFBpbm5lZERhdGF0aXBQb3NpdGlvblxuICBfc2hvd1JhbmdlSGlnaGxpZ2h0OiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoZGF0YXRpcDogRGF0YXRpcCwgZWRpdG9yOiBUZXh0RWRpdG9yLCBwYXJhbXM6IFBpbm5lZERhdGF0aXBQYXJhbXMpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbmV3IERpc3Bvc2FibGUoKVxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKG5ldyBEaXNwb3NhYmxlKCgpID0+IHBhcmFtcy5vbkRpc3Bvc2UodGhpcykpKVxuICAgIHRoaXMuX2RhdGF0aXAgPSBkYXRhdGlwXG4gICAgdGhpcy5fZWRpdG9yID0gZWRpdG9yXG4gICAgdGhpcy5fbWFya2VyID0gbnVsbFxuICAgIHRoaXMuX3JhbmdlRGVjb3JhdGlvbiA9IG51bGxcbiAgICB0aGlzLl9ob3N0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICB0aGlzLl9ob3N0RWxlbWVudC5jbGFzc05hbWUgPSBcImRhdGF0aXAtZWxlbWVudFwiXG4gICAgdGhpcy5fYm91bmREaXNwb3NlID0gdGhpcy5kaXNwb3NlLmJpbmQodGhpcylcbiAgICB0aGlzLl9ib3VuZEhhbmRsZU1vdXNlRG93biA9IHRoaXMuaGFuZGxlTW91c2VEb3duLmJpbmQodGhpcylcbiAgICB0aGlzLl9ib3VuZEhhbmRsZU1vdXNlRW50ZXIgPSB0aGlzLmhhbmRsZU1vdXNlRW50ZXIuYmluZCh0aGlzKVxuICAgIHRoaXMuX2JvdW5kSGFuZGxlTW91c2VMZWF2ZSA9IHRoaXMuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5fYm91bmRIYW5kbGVDYXB0dXJlZENsaWNrID0gdGhpcy5oYW5kbGVDYXB0dXJlZENsaWNrLmJpbmQodGhpcylcbiAgICB0aGlzLl9jaGVja2VkU2Nyb2xsYWJsZSA9IGZhbHNlXG4gICAgdGhpcy5faXNTY3JvbGxhYmxlID0gZmFsc2VcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgT2JzZXJ2YWJsZS5mcm9tRXZlbnQodGhpcy5faG9zdEVsZW1lbnQsIFwid2hlZWxcIikuc3Vic2NyaWJlKChlKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5fY2hlY2tlZFNjcm9sbGFibGUpIHtcbiAgICAgICAgICB0aGlzLl9pc1Njcm9sbGFibGUgPSBpc1Njcm9sbGFibGUodGhpcy5faG9zdEVsZW1lbnQsIGUpXG4gICAgICAgICAgdGhpcy5fY2hlY2tlZFNjcm9sbGFibGUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzU2Nyb2xsYWJsZSkge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApXG4gICAgdGhpcy5faG9zdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5fYm91bmRIYW5kbGVNb3VzZUVudGVyKVxuICAgIHRoaXMuX2hvc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuX2JvdW5kSGFuZGxlTW91c2VMZWF2ZSlcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgICAgdGhpcy5faG9zdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5fYm91bmRIYW5kbGVNb3VzZUVudGVyKVxuICAgICAgICB0aGlzLl9ob3N0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLl9ib3VuZEhhbmRsZU1vdXNlTGVhdmUpXG4gICAgICB9KVxuICAgIClcbiAgICB0aGlzLl9tb3VzZVVwVGltZW91dCA9IG51bGxcbiAgICB0aGlzLl9vZmZzZXQgPSB7IHg6IDAsIHk6IDAgfVxuICAgIHRoaXMuX2lzRHJhZ2dpbmcgPSBmYWxzZVxuICAgIHRoaXMuX2RyYWdPcmlnaW4gPSBudWxsXG4gICAgdGhpcy5faXNIb3ZlcmluZyA9IGZhbHNlXG4gICAgdGhpcy5faGlkZURhdGFUaXBzID0gcGFyYW1zLmhpZGVEYXRhVGlwc1xuICAgIHRoaXMuX3Bvc2l0aW9uID0gcGFyYW1zLnBvc2l0aW9uID09IG51bGwgPyBcImVuZC1vZi1saW5lXCIgOiBwYXJhbXMucG9zaXRpb25cbiAgICB0aGlzLl9zaG93UmFuZ2VIaWdobGlnaHQgPSBwYXJhbXMuc2hvd1JhbmdlSGlnaGxpZ2h0ID09IG51bGwgPyB0cnVlIDogcGFyYW1zLnNob3dSYW5nZUhpZ2hsaWdodFxuICAgIHRoaXMucmVuZGVyKClcbiAgfVxuXG4gIGhhbmRsZU1vdXNlRW50ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9pc0hvdmVyaW5nID0gdHJ1ZVxuICAgIHRoaXMuX2hpZGVEYXRhVGlwcygpXG4gIH1cblxuICBoYW5kbGVNb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5faXNIb3ZlcmluZyA9IGZhbHNlXG4gIH1cblxuICBpc0hvdmVyaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0hvdmVyaW5nXG4gIH1cblxuICBoYW5kbGVHbG9iYWxNb3VzZU1vdmUoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgZXZ0OiBNb3VzZUV2ZW50ID0gKGV2ZW50OiBhbnkpXG4gICAgY29uc3QgeyBfZHJhZ09yaWdpbiB9ID0gdGhpc1xuICAgIGludmFyaWFudChfZHJhZ09yaWdpbilcbiAgICB0aGlzLl9pc0RyYWdnaW5nID0gdHJ1ZVxuICAgIHRoaXMuX29mZnNldCA9IHtcbiAgICAgIHg6IGV2dC5jbGllbnRYIC0gX2RyYWdPcmlnaW4ueCxcbiAgICAgIHk6IGV2dC5jbGllbnRZIC0gX2RyYWdPcmlnaW4ueSxcbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKVxuICB9XG5cbiAgaGFuZGxlR2xvYmFsTW91c2VVcCgpOiB2b2lkIHtcbiAgICAvLyBJZiB0aGUgZGF0YXRpcCB3YXMgbW92ZWQsIHB1c2ggdGhlIGVmZmVjdHMgb2YgbW91c2VVcCB0byB0aGUgbmV4dCB0aWNrLFxuICAgIC8vIGluIG9yZGVyIHRvIGFsbG93IGNhbmNlbGxhdGlvbiBvZiBjYXB0dXJlZCBldmVudHMgKGUuZy4gY2xpY2tzIG9uIGNoaWxkIGNvbXBvbmVudHMpLlxuICAgIHRoaXMuX21vdXNlVXBUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLl9pc0RyYWdnaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuX2RyYWdPcmlnaW4gPSBudWxsXG4gICAgICB0aGlzLl9tb3VzZVVwVGltZW91dCA9IG51bGxcbiAgICAgIHRoaXMuX2Vuc3VyZU1vdXNlU3Vic2NyaXB0aW9uRGlzcG9zZWQoKVxuICAgICAgdGhpcy5yZW5kZXIoKVxuICAgIH0sIDApXG4gIH1cblxuICBfZW5zdXJlTW91c2VTdWJzY3JpcHRpb25EaXNwb3NlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbW91c2VTdWJzY3JpcHRpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5fbW91c2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgICAgdGhpcy5fbW91c2VTdWJzY3JpcHRpb24gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlTW91c2VEb3duKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGV2dDogTW91c2VFdmVudCA9IChldmVudDogYW55KVxuICAgIHRoaXMuX2RyYWdPcmlnaW4gPSB7XG4gICAgICB4OiBldnQuY2xpZW50WCAtIHRoaXMuX29mZnNldC54LFxuICAgICAgeTogZXZ0LmNsaWVudFkgLSB0aGlzLl9vZmZzZXQueSxcbiAgICB9XG4gICAgdGhpcy5fZW5zdXJlTW91c2VTdWJzY3JpcHRpb25EaXNwb3NlZCgpXG4gICAgdGhpcy5fbW91c2VTdWJzY3JpcHRpb24gPSBkb2N1bWVudE1vdXNlTW92ZSQoKVxuICAgICAgLnRha2VVbnRpbChkb2N1bWVudE1vdXNlVXAkKCkpXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgIHRoaXMuaGFuZGxlR2xvYmFsTW91c2VNb3ZlKGUpXG4gICAgICAgIH0sXG4gICAgICAgIChlcnJvcjogYW55KSA9PiB7fSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaGFuZGxlR2xvYmFsTW91c2VVcCgpXG4gICAgICAgIH1cbiAgICAgIClcbiAgfVxuXG4gIGhhbmRsZUNhcHR1cmVkQ2xpY2soZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PD4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5faXNEcmFnZ2luZykge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSGF2ZSB0byByZS1jaGVjayBzY3JvbGxpbmcgYmVjYXVzZSB0aGUgZGF0YXRpcCBzaXplIG1heSBoYXZlIGNoYW5nZWQuXG4gICAgICB0aGlzLl9jaGVja2VkU2Nyb2xsYWJsZSA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcGlubmVkIGRhdGF0aXAuXG4gIF91cGRhdGVIb3N0RWxlbWVudFBvc2l0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgX2VkaXRvciwgX2RhdGF0aXAsIF9ob3N0RWxlbWVudCwgX29mZnNldCwgX3Bvc2l0aW9uIH0gPSB0aGlzXG4gICAgY29uc3QgeyByYW5nZSB9ID0gX2RhdGF0aXBcbiAgICBfaG9zdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgIHN3aXRjaCAoX3Bvc2l0aW9uKSB7XG4gICAgICBjYXNlIFwiZW5kLW9mLWxpbmVcIjpcbiAgICAgICAgY29uc3QgY2hhcldpZHRoID0gX2VkaXRvci5nZXREZWZhdWx0Q2hhcldpZHRoKClcbiAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IF9lZGl0b3IuZ2V0QnVmZmVyKCkuZ2V0TGluZXMoKVtyYW5nZS5zdGFydC5yb3ddLmxlbmd0aFxuICAgICAgICBfaG9zdEVsZW1lbnQuc3R5bGUudG9wID0gLV9lZGl0b3IuZ2V0TGluZUhlaWdodEluUGl4ZWxzKCkgKyBfb2Zmc2V0LnkgKyBcInB4XCJcbiAgICAgICAgX2hvc3RFbGVtZW50LnN0eWxlLmxlZnQgPSAobGluZUxlbmd0aCAtIHJhbmdlLmVuZC5jb2x1bW4pICogY2hhcldpZHRoICsgTElORV9FTkRfTUFSR0lOICsgX29mZnNldC54ICsgXCJweFwiXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFwiYWJvdmUtcmFuZ2VcIjpcbiAgICAgICAgX2hvc3RFbGVtZW50LnN0eWxlLmJvdHRvbSA9IF9lZGl0b3IuZ2V0TGluZUhlaWdodEluUGl4ZWxzKCkgKyBfaG9zdEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gX29mZnNldC55ICsgXCJweFwiXG4gICAgICAgIF9ob3N0RWxlbWVudC5zdHlsZS5sZWZ0ID0gX29mZnNldC54ICsgXCJweFwiXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICA7KF9wb3NpdGlvbjogZW1wdHkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBQaW5uZWREYXRhdGlwIHBvc2l0aW9uOiAke3RoaXMuX3Bvc2l0aW9ufWApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVuZGVyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgX2VkaXRvciwgX2RhdGF0aXAsIF9ob3N0RWxlbWVudCwgX2lzRHJhZ2dpbmcsIF9pc0hvdmVyaW5nIH0gPSB0aGlzXG5cbiAgICBsZXQgcmFuZ2VDbGFzc25hbWUgPSBcImRhdGF0aXAtaGlnaGxpZ2h0LXJlZ2lvblwiXG4gICAgaWYgKF9pc0hvdmVyaW5nKSB7XG4gICAgICByYW5nZUNsYXNzbmFtZSArPSBcIiBkYXRhdGlwLWhpZ2hsaWdodC1yZWdpb24tYWN0aXZlXCJcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbWFya2VyID09IG51bGwpIHtcbiAgICAgIGNvbnN0IG1hcmtlcjogYXRvbSRNYXJrZXIgPSBfZWRpdG9yLm1hcmtCdWZmZXJSYW5nZShfZGF0YXRpcC5yYW5nZSwge1xuICAgICAgICBpbnZhbGlkYXRlOiBcIm5ldmVyXCIsXG4gICAgICB9KVxuICAgICAgdGhpcy5fbWFya2VyID0gbWFya2VyXG4gICAgICBfZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgICB0eXBlOiBcIm92ZXJsYXlcIixcbiAgICAgICAgcG9zaXRpb246IFwiaGVhZFwiLFxuICAgICAgICBjbGFzczogXCJkYXRhdGlwLXBpbm5lZC1vdmVybGF5XCIsXG4gICAgICAgIGl0ZW06IHRoaXMuX2hvc3RFbGVtZW50LFxuICAgICAgICAvLyBhYm92ZS1yYW5nZSBkYXRhdGlwcyBjdXJyZW50bHkgYXNzdW1lIHRoYXQgdGhlIG92ZXJsYXkgaXMgYmVsb3cuXG4gICAgICAgIGF2b2lkT3ZlcmZsb3c6IHRoaXMuX3Bvc2l0aW9uICE9PSBcImFib3ZlLXJhbmdlXCIsXG4gICAgICB9KVxuICAgICAgaWYgKHRoaXMuX3Nob3dSYW5nZUhpZ2hsaWdodCkge1xuICAgICAgICB0aGlzLl9yYW5nZURlY29yYXRpb24gPSBfZWRpdG9yLmRlY29yYXRlTWFya2VyKG1hcmtlciwge1xuICAgICAgICAgIHR5cGU6IFwiaGlnaGxpZ2h0XCIsXG4gICAgICAgICAgY2xhc3M6IHJhbmdlQ2xhc3NuYW1lLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgYXdhaXQgX2VkaXRvci5nZXRFbGVtZW50KCkuZ2V0TmV4dFVwZGF0ZVByb21pc2UoKVxuICAgICAgLy8gR3VhcmQgYWdhaW5zdCBkaXNwb3NhbHMgZHVyaW5nIHRoZSBhd2FpdC5cbiAgICAgIGlmIChtYXJrZXIuaXNEZXN0cm95ZWQoKSB8fCBfZWRpdG9yLmlzRGVzdHJveWVkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9yYW5nZURlY29yYXRpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmFuZ2VEZWNvcmF0aW9uLnNldFByb3BlcnRpZXMoe1xuICAgICAgICB0eXBlOiBcImhpZ2hsaWdodFwiLFxuICAgICAgICBjbGFzczogcmFuZ2VDbGFzc25hbWUsXG4gICAgICB9KVxuICAgIH1cblxuICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgIDxDb250ZW50Vmlld1xuICAgICAgICBhY3Rpb249e0RBVEFUSVBfQUNUSU9OUy5DTE9TRX1cbiAgICAgICAgYWN0aW9uVGl0bGU9XCJDbG9zZSB0aGlzIGRhdGF0aXBcIlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoX2lzRHJhZ2dpbmcgPyBcImRhdGF0aXAtZHJhZ2dpbmdcIiA6IFwiXCIsIFwiZGF0YXRpcC1waW5uZWRcIil9XG4gICAgICAgIGRhdGF0aXA9e19kYXRhdGlwfVxuICAgICAgICBvbkFjdGlvbkNsaWNrPXt0aGlzLl9ib3VuZERpc3Bvc2V9XG4gICAgICAgIG9uTW91c2VEb3duPXt0aGlzLl9ib3VuZEhhbmRsZU1vdXNlRG93bn1cbiAgICAgICAgb25DbGlja0NhcHR1cmU9e3RoaXMuX2JvdW5kSGFuZGxlQ2FwdHVyZWRDbGlja31cbiAgICAgIC8+LFxuICAgICAgX2hvc3RFbGVtZW50XG4gICAgKVxuICAgIHRoaXMuX3VwZGF0ZUhvc3RFbGVtZW50UG9zaXRpb24oKVxuICB9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbW91c2VVcFRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX21vdXNlVXBUaW1lb3V0KVxuICAgIH1cbiAgICBpZiAodGhpcy5fbWFya2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21hcmtlci5kZXN0cm95KClcbiAgICB9XG4gICAgaWYgKHRoaXMuX21vdXNlU3Vic2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX21vdXNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgICB9XG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLl9ob3N0RWxlbWVudClcbiAgICB0aGlzLl9ob3N0RWxlbWVudC5yZW1vdmUoKVxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuZGlzcG9zZSgpXG4gIH1cbn1cbiJdfQ==