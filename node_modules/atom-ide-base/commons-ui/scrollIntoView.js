"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollIntoViewIfNeeded = exports.scrollIntoView = void 0;
function scrollIntoView(el, alignToTop) {
    const scrollTops = getScrollTops(el);
    el.scrollIntoView(alignToTop);
    restoreOverflowHiddenScrollTops(scrollTops);
}
exports.scrollIntoView = scrollIntoView;
function scrollIntoViewIfNeeded(el, center) {
    var _a;
    const scrollTops = getScrollTops(el);
    (_a = el === null || el === void 0 ? void 0 : el.scrollIntoViewIfNeeded(center)) !== null && _a !== void 0 ? _a : el.scrollIntoView(center);
    restoreOverflowHiddenScrollTops(scrollTops);
}
exports.scrollIntoViewIfNeeded = scrollIntoViewIfNeeded;
function getScrollTops(el_) {
    let el = el_;
    const scrollTops = new Map();
    while (el != null) {
        scrollTops.set(el, el.scrollTop);
        el = el.parentElement;
    }
    return scrollTops;
}
function restoreOverflowHiddenScrollTops(scrollTops) {
    scrollTops.forEach((scrollTop, el) => {
        if (el.scrollTop !== scrollTop && isOverflowHidden(el)) {
            el.scrollTop = scrollTop;
        }
    });
}
function isOverflowHidden(el) {
    const overflowStyle = el === null || el === void 0 ? void 0 : el.style.overflow;
    const overflow = overflowStyle !== null && overflowStyle !== void 0 ? overflowStyle : getComputedStyle(el).overflow;
    return overflow === "hidden";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsSW50b1ZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMtY29tbW9ucy11aS9zY3JvbGxJbnRvVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUErQkEsU0FBZ0IsY0FBYyxDQUFDLEVBQVcsRUFBRSxVQUFvQjtJQUM5RCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDcEMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM3QiwrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUM3QyxDQUFDO0FBSkQsd0NBSUM7QUFFRCxTQUFnQixzQkFBc0IsQ0FBQyxFQUFXLEVBQUUsTUFBZ0I7O0lBQ2xFLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNwQyxNQUFBLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxzQkFBc0IsQ0FBQyxNQUFNLG9DQUFLLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDL0QsK0JBQStCLENBQUMsVUFBVSxDQUFDLENBQUE7QUFDN0MsQ0FBQztBQUpELHdEQUlDO0FBRUQsU0FBUyxhQUFhLENBQUMsR0FBWTtJQUNqQyxJQUFJLEVBQUUsR0FBbUIsR0FBRyxDQUFBO0lBQzVCLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDNUIsT0FBTyxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNoQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQTtLQUN0QjtJQUNELE9BQU8sVUFBVSxDQUFBO0FBQ25CLENBQUM7QUFFRCxTQUFTLCtCQUErQixDQUFDLFVBQWdDO0lBQ3ZFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDbkMsSUFBSSxFQUFFLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0RCxFQUFFLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtTQUN6QjtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsRUFBc0M7SUFFOUQsTUFBTSxhQUFhLEdBQUcsRUFBRSxhQUFGLEVBQUUsdUJBQUYsRUFBRSxDQUFFLEtBQUssQ0FBQyxRQUFRLENBQUE7SUFDeEMsTUFBTSxRQUFRLEdBQUcsYUFBYSxhQUFiLGFBQWEsY0FBYixhQUFhLEdBQUksZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFBO0lBQy9ELE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQTtBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBnZXRDb21wdXRlZFN0eWxlICovXG5cbi8qKlxuICogVXNlIHRoZXNlIGZ1bmN0aW9ucyBpbnN0ZWFkIG9mIGBFbGVtZW50OjpzY3JvbGxJbnRvVmlldygpYCBhbmRcbiAqIGBFbGVtZW50OjpzY3JvbGxJbnRvVmlld0lmTmVlZGVkKClgIVxuICpcbiAqIFdlJ3ZlIGhhZCBhIHJlY3VycmluZyBpc3N1ZSBpbiBOdWNsaWRlIChlLmcuIFQyMDAyODEzOCkgd2hlcmUgdGhlIFVJIHdvdWxkIHNoaWZ0LCBsZWF2aW5nIHBhcnQgb2ZcbiAqIHRoZSB3b3Jrc3BhY2UgZWxlbWVudCBvZmZzY3JlZW4gYW5kIGEgYmxhbmsgYXJlYSBpbiB0aGUgd2luZG93LiBUaGlzIHdhcyBjYXVzZWQgYnkgY2FsbGVkIHRvIHRoZVxuICogbmF0aXZlIGBzY3JvbGxJbnRvVmlldygpYCBhbmQgYHNjcm9sbEludG9WaWV3SWZOZWVkZWQoKWAgd2hpY2gsIGFjY29yZGluZyB0byB0aGUgc3BlYywgaGFzIHR3b1xuICogcG90ZW50aWFsbHkgc3VycHJpc2luZyBiZWhhdmlvcnM6XG4gKlxuICogMS4gW0l0IHNjcm9sbHMgZXZlcnkgc2Nyb2xsYWJsZSBhbmNlc3RvciAobm90IGp1c3QgdGhlIGNsb3Nlc3QpXVsxXSwgd2hlcmVcbiAqIDIuIFwic2Nyb2xsYWJsZVwiIGlzIFtleHBsaWNpdGx5IGRlZmluZWRdWzJdIHRvIGluY2x1ZGUgZWxlbWVudHMgd2l0aCBgb3ZlcmZsb3c6IGhpZGRlbmBcbiAqXG4gKiBUaGlzIGlzIHN1cnByaXNpbmcgYmVjYXVzZSBgb3ZlcmZsb3c6IGhpZGRlbmAgaXMgdHlwaWNhbGx5IHVzZWQgdG8gbWFrZSBlbGVtZW50cyAqbm90XG4gKiBzY3JvbGxhYmxlKi5cbiAqXG4gKiBPbmNlIHRoZSBgb3ZlcmZsb3c6IGhpZGRlbmAgZWxlbWVudCBpcyBzY3JvbGxlZCwgdGhlIHVzZXIgaGFzIG5vIHdheSB0byByZXR1cm4gaXQgdG8gaXRzIG9yaWdpbmFsXG4gKiBwb3NpdGlvbiAoYXMgaXQgaGFzIG5vIHNjcm9sbGJhcnMpLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIEFQSSBkb2Vzbid0IHN1cHBvcnQgc21vb3RoIHNjcm9sbGluZy4gSWYgdGhhdCBiZWNvbWVzIG5lY2Vzc2FyeSwgd2UnbGwgbmVlZCB0b1xuICogY29tZSB1cCB3aXRoIGEgYmV0dGVyIGZpeC5cbiAqXG4gKiBJdCdzIHRlbXB0aW5nIHRvIGFzc3VtZSB0aGF0IHVzaW5nIGBzY3JvbGxJbnRvVmlld0lmTmVlZGVkKClgIHdvdWxkIGZpeCB0aGlzIGlzc3VlLCBob3dldmVyLCBpZlxuICogdGhlIHdpbmRvdyBpcyBzbWFsbCBlbm91Z2ggc28gdGhhdCBubyBhbW91bnQgb2Ygc2Nyb2xsaW5nIHRoZSBkZXNpcmVkIHNjcm9sbGFibGUgZWxlbWVudCB3b3VsZFxuICogZXZlciByZXZlYWwgdGhlIGVsZW1lbnQgeW91J3JlIHRyeWluZyB0bywgdGhlIGJyb3dzZXIgd2lsbCBrZWVwIHNjcm9sbGluZyBhbmNlc3RvcnMuXG4gKlxuICogWzFdOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20tdmlldy8jZWxlbWVudC1zY3JvbGxpbmctbWVtYmVyc1xuICogWzJdOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20tdmlldy8jc2Nyb2xsaW5nLWJveFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhlbDogRWxlbWVudCwgYWxpZ25Ub1RvcD86IGJvb2xlYW4pOiB2b2lkIHtcbiAgY29uc3Qgc2Nyb2xsVG9wcyA9IGdldFNjcm9sbFRvcHMoZWwpXG4gIGVsLnNjcm9sbEludG9WaWV3KGFsaWduVG9Ub3ApXG4gIHJlc3RvcmVPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMoc2Nyb2xsVG9wcylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoZWw6IEVsZW1lbnQsIGNlbnRlcj86IGJvb2xlYW4pOiB2b2lkIHtcbiAgY29uc3Qgc2Nyb2xsVG9wcyA9IGdldFNjcm9sbFRvcHMoZWwpXG4gIGVsPy5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKGNlbnRlcikgPz8gZWwuc2Nyb2xsSW50b1ZpZXcoY2VudGVyKVxuICByZXN0b3JlT3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzKHNjcm9sbFRvcHMpXG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFRvcHMoZWxfOiBFbGVtZW50KTogTWFwPEVsZW1lbnQsIG51bWJlcj4ge1xuICBsZXQgZWw6IEVsZW1lbnQgfCBudWxsID0gZWxfXG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBuZXcgTWFwKClcbiAgd2hpbGUgKGVsICE9IG51bGwpIHtcbiAgICBzY3JvbGxUb3BzLnNldChlbCwgZWwuc2Nyb2xsVG9wKVxuICAgIGVsID0gZWwucGFyZW50RWxlbWVudFxuICB9XG4gIHJldHVybiBzY3JvbGxUb3BzXG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVPdmVyZmxvd0hpZGRlblNjcm9sbFRvcHMoc2Nyb2xsVG9wczogTWFwPEVsZW1lbnQsIG51bWJlcj4pOiB2b2lkIHtcbiAgc2Nyb2xsVG9wcy5mb3JFYWNoKChzY3JvbGxUb3AsIGVsKSA9PiB7XG4gICAgaWYgKGVsLnNjcm9sbFRvcCAhPT0gc2Nyb2xsVG9wICYmIGlzT3ZlcmZsb3dIaWRkZW4oZWwpKSB7XG4gICAgICBlbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3BcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dIaWRkZW4oZWw6IEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCB8IEVsZW1lbnQpOiBib29sZWFuIHtcbiAgLy9AdHMtaWdub3JlXG4gIGNvbnN0IG92ZXJmbG93U3R5bGUgPSBlbD8uc3R5bGUub3ZlcmZsb3dcbiAgY29uc3Qgb3ZlcmZsb3cgPSBvdmVyZmxvd1N0eWxlID8/IGdldENvbXB1dGVkU3R5bGUoZWwpLm92ZXJmbG93XG4gIHJldHVybiBvdmVyZmxvdyA9PT0gXCJoaWRkZW5cIlxufVxuIl19