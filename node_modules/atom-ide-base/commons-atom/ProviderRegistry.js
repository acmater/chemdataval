"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderRegistry = void 0;
const atom_1 = require("atom");
class ProviderRegistry {
    constructor() {
        this.providers = [];
    }
    addProvider(provider) {
        const index = this.providers.findIndex((p) => provider.priority > p.priority);
        if (index === -1) {
            this.providers.push(provider);
        }
        else {
            this.providers.splice(index, 0, provider);
        }
        return new atom_1.Disposable(() => {
            this.removeProvider(provider);
        });
    }
    removeProvider(provider) {
        const index = this.providers.indexOf(provider);
        if (index !== -1) {
            this.providers.splice(index, 1);
        }
    }
    getProviderForEditor(editor) {
        const grammar = editor.getGrammar().scopeName;
        return this.findProvider(grammar);
    }
    getAllProvidersForEditor(editor) {
        const grammar = editor.getGrammar().scopeName;
        return this.findAllProviders(grammar);
    }
    findProvider(grammar) {
        for (const provider of this.findAllProviders(grammar)) {
            return provider;
        }
        return null;
    }
    *findAllProviders(grammar) {
        for (const provider of this.providers) {
            if (provider.grammarScopes == null || provider.grammarScopes.indexOf(grammar) !== -1) {
                yield provider;
            }
        }
    }
}
exports.ProviderRegistry = ProviderRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXJSZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLWF0b20vUHJvdmlkZXJSZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBNkM7QUFHN0MsTUFBYSxnQkFBZ0I7SUFHM0I7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQWtCO1FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM3RSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtTQUMxQztRQUNELE9BQU8sSUFBSSxpQkFBVSxDQUFDLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9CLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFrQjtRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5QyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDaEM7SUFDSCxDQUFDO0lBR0Qsb0JBQW9CLENBQUMsTUFBa0I7UUFDckMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQTtRQUM3QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUdELHdCQUF3QixDQUFDLE1BQWtCO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUE7UUFDN0MsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFlO1FBQzFCLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JELE9BQU8sUUFBUSxDQUFBO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBS0QsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlO1FBQy9CLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNyQyxJQUFJLFFBQVEsQ0FBQyxhQUFhLElBQUksSUFBSSxJQUFJLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNwRixNQUFNLFFBQVEsQ0FBQTthQUNmO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUF2REQsNENBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlzcG9zYWJsZSwgVGV4dEVkaXRvciB9IGZyb20gXCJhdG9tXCJcbmltcG9ydCB7IFByb3ZpZGVyIGFzIFByb3ZpZGVyVHlwZXMsIEJ1c3lTaWduYWxQcm92aWRlciwgRmluZFJlZmVyZW5jZXNQcm92aWRlciB9IGZyb20gXCIuLi90eXBlcy1wYWNrYWdlcy9tYWluLmRcIlxuXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJSZWdpc3RyeTxQcm92aWRlciBleHRlbmRzIEV4Y2x1ZGU8UHJvdmlkZXJUeXBlcywgQnVzeVNpZ25hbFByb3ZpZGVyIHwgRmluZFJlZmVyZW5jZXNQcm92aWRlcj4+IHtcbiAgcHJpdmF0ZSBwcm92aWRlcnM6IEFycmF5PFByb3ZpZGVyPlxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucHJvdmlkZXJzID0gW11cbiAgfVxuXG4gIGFkZFByb3ZpZGVyKHByb3ZpZGVyOiBQcm92aWRlcik6IERpc3Bvc2FibGUge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wcm92aWRlcnMuZmluZEluZGV4KChwKSA9PiBwcm92aWRlci5wcmlvcml0eSA+IHAucHJpb3JpdHkpXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgdGhpcy5wcm92aWRlcnMucHVzaChwcm92aWRlcilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm92aWRlcnMuc3BsaWNlKGluZGV4LCAwLCBwcm92aWRlcilcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlUHJvdmlkZXIocHJvdmlkZXIpXG4gICAgfSlcbiAgfVxuXG4gIHJlbW92ZVByb3ZpZGVyKHByb3ZpZGVyOiBQcm92aWRlcik6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wcm92aWRlcnMuaW5kZXhPZihwcm92aWRlcilcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLnByb3ZpZGVycy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETyBkZXByZWNhdGUgc2luY2UgdGhlcmUgY2FuIGJlIE4gcHJvdmlkZXJzLlxuICBnZXRQcm92aWRlckZvckVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IpOiBQcm92aWRlciB8IG51bGwge1xuICAgIGNvbnN0IGdyYW1tYXIgPSBlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZVxuICAgIHJldHVybiB0aGlzLmZpbmRQcm92aWRlcihncmFtbWFyKVxuICB9XG5cbiAgLy8gVE9ETyBjcmVhdGUgYW4gb3JkZXJpbmcgb3IgcHJpb3JpdHkgYXdhcmUgdXRpbCB0byBwcmVmZXIgaW5zdGVhZC5cbiAgZ2V0QWxsUHJvdmlkZXJzRm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcik6IEl0ZXJhYmxlPFByb3ZpZGVyPiB7XG4gICAgY29uc3QgZ3JhbW1hciA9IGVkaXRvci5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lXG4gICAgcmV0dXJuIHRoaXMuZmluZEFsbFByb3ZpZGVycyhncmFtbWFyKVxuICB9XG5cbiAgZmluZFByb3ZpZGVyKGdyYW1tYXI6IHN0cmluZyk6IFByb3ZpZGVyIHwgbnVsbCB7XG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiB0aGlzLmZpbmRBbGxQcm92aWRlcnMoZ3JhbW1hcikpIHtcbiAgICAgIHJldHVybiBwcm92aWRlclxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIG92ZXIgYWxsIHByb3ZpZGVycyBtYXRjaGluZyB0aGUgZ3JhbW1hciwgaW4gcHJpb3JpdHkgb3JkZXIuXG4gICAqL1xuICAqZmluZEFsbFByb3ZpZGVycyhncmFtbWFyOiBzdHJpbmcpOiBJdGVyYWJsZTxQcm92aWRlcj4ge1xuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgdGhpcy5wcm92aWRlcnMpIHtcbiAgICAgIGlmIChwcm92aWRlci5ncmFtbWFyU2NvcGVzID09IG51bGwgfHwgcHJvdmlkZXIuZ3JhbW1hclNjb3Blcy5pbmRleE9mKGdyYW1tYXIpICE9PSAtMSkge1xuICAgICAgICB5aWVsZCBwcm92aWRlclxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19